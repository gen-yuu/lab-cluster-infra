---
# Kubernetesノード共通セットアップ（Ubuntu 22.04）

# --- 前提パッケージのインストール ---
- name: "COMMON | 00: Install prerequisite packages"
  ansible.builtin.apt:
    name:
      - apt-transport-https # HTTPS経由のAPTリポジトリに必要
      - ca-certificates   # CA証明書（HTTPS通信に必要）
      - curl              # ファイルダウンロードなどに使用
      - gnupg             # GPGキーの操作に必要
    state: present
    update_cache: yes
  tags:
    - prereqs

# --- Python prerequisites for Ansible Kubernetes modules ---
- name: "COMMON | Install Python pip and Kubernetes library"
  block:
    - name: Ensure python3-pip is installed
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes 

    - name: Install Kubernetes Python library
      ansible.builtin.pip:
        name: kubernetes
        executable: pip3 
        state: present
  tags:
    - k8s_python_deps 

# --- srv-adminユーザ／グループの作成 ---
- name: "COMMON | 01: Create a unified admin user 'srv-admin'"
  block:
    - name: Ensure group 'srv-admin' exists
      ansible.builtin.group:
        name: srv-admin
        state: present

    - name: Create user 'srv-admin'
      ansible.builtin.user:
        name: srv-admin
        comment: "Server Administrator"
        shell: /bin/bash
        group: srv-admin
        groups: sudo
        create_home: yes
        state: present

    - name: Grant 'srv-admin' passwordless sudo rights
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/90-srv-admin"
        content: "srv-admin ALL=(ALL) NOPASSWD:ALL"
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Deploy authorized_keys for 'srv-admin'
      ansible.posix.authorized_key:
        user: srv-admin
        state: present
        key: "{{ lookup('file', item) }}"
      with_fileglob:
        - "files/public_keys/*.pub"
  tags:
    - user_management

# --- swap無効化 ---
- name: "COMMON | 02: Disable swap"
  block:
    - name: Turn off all swap devices
      ansible.posix.mount:
        name: none
        fstype: swap
        state: absent

    - name: Comment out swap lines in /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*\/.*?\s+swap\s+.*)$'
        replace: '# \1'
  tags:
    - swap

# --- カーネル設定 ---
- name: "COMMON | 03: Configure kernel for Kubernetes"
  block:
    - name: Persist kernel modules (for boot time)
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Load kernel modules immediately
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Ensure kernel sysctl params
      ansible.posix.sysctl:
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
        reload: yes
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop:
        - { key: net.bridge.bridge-nf-call-iptables,  value: '1' }
        - { key: net.bridge.bridge-nf-call-ip6tables, value: '1' }
        - { key: net.ipv4.ip_forward,                value: '1' }
  tags:
    - kernel_settings

# --- Docker APTリポジトリ設定 & containerd設定 ---
- name: "COMMON | 04: Install and configure containerd"
  block:
    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Install Docker GPG key (ASCII, idempotent)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: false

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ docker_arch_map[ansible_architecture] | default('amd64') }}
              signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        filename: docker
        state: present

    - name: Update apt cache after repo change
      ansible.builtin.apt:
        update_cache: yes
      changed_when: false

    - name: Install containerd package
      ansible.builtin.apt:
        name: "{{ containerd_pkg }}"
        state: present

    - name: Ensure /etc/containerd directory exists
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Deploy containerd config
      ansible.builtin.template:
        src: containerd_config.toml.j2
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'
      notify: Restart containerd

    - name: Ensure containerd service is running and enabled
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: yes
  tags:
    - containerd

# --- Kubernetes APTレポジトリ&パッケージ ---
- name: "COMMON | 05: Install Kubernetes packages (kubeadm/kubelet/kubectl)"
  block:
    - name: Install Kubernetes GPG key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kube_minor }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-{{ kube_minor }}.asc   
        mode: '0644'
        force: false

    - name: Add Kubernetes APT repository v{{ kube_minor }}
      ansible.builtin.apt_repository:
        repo: >-
          deb [signed-by=/etc/apt/keyrings/kubernetes-{{ kube_minor }}.asc]
          https://pkgs.k8s.io/core:/stable:/v{{ kube_minor }}/deb/ /
        filename: kubernetes
        state: present
        update_cache: false
        
    - name: Update apt cache after repo change
      ansible.builtin.apt:
        update_cache: yes
      changed_when: false

    - name: Install Kubernetes packages {{ kube_version }}
      ansible.builtin.apt:
        name:
          - "kubelet={{ kube_version }}"
          - "kubeadm={{ kube_version }}"
          - "kubectl={{ kube_version }}"
        state: present
        allow_change_held_packages: yes
      notify: Restart kubelet
    
    - name: Hold Kubernetes packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
  tags:
    - kube_packages